// <auto-generated />
using System;
using MagazinHaine.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MagazinHaine.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201111083835_AdaugaShoppingCartItem")]
    partial class AdaugaShoppingCartItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MagazinHaine.Models.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriereCategorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeCategorie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieId");

                    b.ToTable("Categorii");

                    b.HasData(
                        new
                        {
                            CategorieId = 1,
                            NumeCategorie = "Tricouri"
                        },
                        new
                        {
                            CategorieId = 2,
                            NumeCategorie = "Bluze"
                        },
                        new
                        {
                            CategorieId = 3,
                            NumeCategorie = "Geci"
                        },
                        new
                        {
                            CategorieId = 4,
                            NumeCategorie = "Pantaloni"
                        },
                        new
                        {
                            CategorieId = 5,
                            NumeCategorie = "Adidasi"
                        });
                });

            modelBuilder.Entity("MagazinHaine.Models.Produs", b =>
                {
                    b.Property<int>("ProdusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Descriere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsteDeVanzare")
                        .HasColumnType("bit");

                    b.Property<bool>("EsteInStoc")
                        .HasColumnType("bit");

                    b.Property<string>("Nume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Pret")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UrlPoza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlThumbnailPoza")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProdusId");

                    b.HasIndex("CategorieId");

                    b.ToTable("Produse");

                    b.HasData(
                        new
                        {
                            ProdusId = 1,
                            CategorieId = 1,
                            Descriere = "Foarte placut la purtare",
                            EsteDeVanzare = false,
                            EsteInStoc = true,
                            Nume = "Tricou bumbac",
                            Pret = 25m,
                            UrlPoza = "\\img\\tricou.jpg",
                            UrlThumbnailPoza = "\\img\\thumbnails\\tricou-small.jpg"
                        },
                        new
                        {
                            ProdusId = 2,
                            CategorieId = 2,
                            Descriere = "Tine foarte multa caldura",
                            EsteDeVanzare = false,
                            EsteInStoc = true,
                            Nume = "Bluza pentru sezonul rece",
                            Pret = 100m,
                            UrlPoza = "\\img\\bluza.jpg",
                            UrlThumbnailPoza = "\\img\\thumbnails\\bluza-small.jpg"
                        },
                        new
                        {
                            ProdusId = 3,
                            CategorieId = 3,
                            Descriere = "Facuta din pene de gasca",
                            EsteDeVanzare = false,
                            EsteInStoc = true,
                            Nume = "Geaca de puf",
                            Pret = 125m,
                            UrlPoza = "\\img\\geaca.jpg",
                            UrlThumbnailPoza = "\\img\\thumbnails\\geaca-small.jpg"
                        },
                        new
                        {
                            ProdusId = 4,
                            CategorieId = 4,
                            Descriere = "Material foarte fin",
                            EsteDeVanzare = false,
                            EsteInStoc = true,
                            Nume = "Pantaloni de dama",
                            Pret = 75m,
                            UrlPoza = "\\img\\thumbnails\\pantaloni-small.jpg",
                            UrlThumbnailPoza = "\\img\\thumbnails\\pantaloni-small.jpg"
                        },
                        new
                        {
                            ProdusId = 5,
                            CategorieId = 5,
                            Descriere = "Talpa foarte moale, placuti la purtare.",
                            EsteDeVanzare = false,
                            EsteInStoc = true,
                            Nume = "Adidasi Fila",
                            Pret = 75m,
                            UrlPoza = "\\img\\thumbnails\\adidasi-small.jpg",
                            UrlThumbnailPoza = "\\img\\thumbnails\\adidasi-small.jpg"
                        });
                });

            modelBuilder.Entity("MagazinHaine.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantitate")
                        .HasColumnType("int");

                    b.Property<int?>("ProdusId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProdusId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("MagazinHaine.Models.Produs", b =>
                {
                    b.HasOne("MagazinHaine.Models.Categorie", "Categorie")
                        .WithMany("Produse")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagazinHaine.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("MagazinHaine.Models.Produs", "Produs")
                        .WithMany()
                        .HasForeignKey("ProdusId");
                });
#pragma warning restore 612, 618
        }
    }
}
